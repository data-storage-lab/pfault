############################################################
# SCSI Recorder & Replayer
############################################################

#===========================
#Install iSCSI initiator 
#===========================
#Debian7 / Ubuntu 10.04/14.04/16.04:
sudo apt-get install open-iscsi


#===========================
#Build the framework
#===========================
#assume the repository is cloned to ~/scsi-tool 
cd ~/scsi-tool
make

#generate virtual disk images (i.e., files) for backing store
#the images are generated in ~/pfe_images by default
cd ~/scsi-tool/pfe_scripts
./gen_img.sh


#===========================
#Run the example workload
#===========================
#an example workload is stored in ~/scsi-tool/pfe_apps/TC
cd ~/scsi-tool/pfe_apps/TC

#follow the README-TC to install tc:
#(see README-TC)

#after installing tc, copy the example workload to your own dir
#outside of the repos (e.g.,~)
cp -r ~/scsi-tool/pfe_apps/TC/tc_wkld4 ~

#compile the workload
cd ~/tc_wkld4
make

#config the environment, set the paths according to your local OS:
cd ~/tc_wkld4/run_sh
#(see ~/tc_wkld4/run_sh/pfe_local_conf.sh, 
# change all "/home/mzheng/..." paths to your local environment)

#run the workload:
./run.sh

#(expected output after sucessful exectuion:
#...
#+++++++++++     +++++++++++
#k-98  v-98
#+++++++++++     +++++++++++
#k-99  v-99-thr-1-txn-1-k-99
###### Do Check Finished
#
########## APP CHECK DONE
#
#ls /home/mzheng/pfe_mnt
#total 14
#2049  1 drwxrwxr-x 2 mzheng mzheng  1024 Jun  3 11:50 myEnvironment
#  12  1 -rwxrwxrwx 1 mzheng mzheng    21 Jun  3 11:50 testfile
#  11 12 drwxrwxrwx 2 root   root   12288 Jun  3 11:18 lost+found
#ls /home/mzheng/pfe_mnt/myEnvironment
#total 138
#2050 138 -rw-r--r-- 1 mzheng mzheng 140288 Jun  3 11:50 casket.tcb
#### sudo umount /home/mzheng/pfe_mnt
#ls /home/mzheng/pfe_mnt
#total 0
#
################# STAGE #3 DONE!
#Fri Jun  3 11:51:05 MDT 2016
#
#)


#Note:
#the results/logs are stored in ~/pfe_logs by default
# e.g. in "~/logs-folder/logs-tc-wkld4_THR-2-TXN-10-KEY-10_fail-0-unseri-small-fs-xfs-cutopt-EXHAUSTIVE_CUT-100.131030182821"




###################################
## The original tgt README 
###################################
#Introduction
#-------------
#Linux target framework (tgt) aims to simplify various SCSI target
#driver (iSCSI, Fibre Channel, SRP, etc) creation and maintenance.
#
#Currently, tgt supports the following target drivers:
#
#- iSCSI software target driver for Ethernet NICs
#
#- iSER software target driver for Infiniband and RDMA NICs
#
#- IBM System p VIO server
#
#- FCoE software target driver for Ethernet NICs (in progress)
#
#- Qlogic qla2xxx FC target driver (in progress)
#
#Tgt consists of kernel modules, user-space daemon, and user-space
#tools. iSCSI, iSER, and FCoE target drivers use only user-space daemon
#and tools (i.e. they are just user-space applications. They don't need
#any kernel support).
#
#tgt can emulate the following device types:
#
#- SBC: a virtual disk drive that can use a file to store the content.
#
#- SMC: a virtual media jukebox that can be controlled by the "mtx"
#tool.
#
#- MMC: a virtual DVD drive that can read DVD-ROM iso files and create
#burnable DVD+R. It can be combined with SMC to provide a fully
#operational DVD jukebox.
#
#- SSC: a virtual tape device (aka VTL) that can use a file to store
#the content.
#
#- OSD: a virtual object-based storage device that can use a file to
#store the content (in progress).
#
#The code is under the GNU General Public License version 2.
#
#
#Preparation
#-------------
#Linux kernel 2.6.22 or newer are recommended because tgt can get
#better performance with signalfd.
#
#Target drivers have their own ways to build, configure, etc. Please
#find an appropriate documentation in the doc directory. You might find
#other useful information on tgt's site:
#
#http://stgt.sourceforge.net/
#
#
#Developer Notes
#-------------
#The central resource for tgt development is the mailing list
#(stgt@vger.kernel.org).
#
#First, please read the following documents (in short, follow Linux
#kernel development rules):
#
#http://lxr.linux.no/source/Documentation/CodingStyle
#http://lxr.linux.no/source/Documentation/SubmittingPatches
#
#Then, check your patches with the patch style checker prior to
#submission (scripts/checkpatch.pl) like the following example.
#
#fujita@arbre:~/git/tgt$ ./scripts/checkpatch.pl ~/0001-add-bidi-support.patch
#Your patch has no obvious style problems and is ready for submission.
